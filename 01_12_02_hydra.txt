Protection in the HYDRA Operating System
========================================================================
What is HYDRA:
	An OS kernel for multiprocessing environments which provides fine-grained protection
	HYDRA believes that protection must be an integral part of the operating system
	It offers a capability-based protection mechanism which supports user-defined protected sub-systems (Ex: file and directory sub-system)
	Protection mechanism is flexible enough to provide a wide range of security policies
		Note that protection is a mechanism, security is a policy! Policy is what you want restricted, mechanism is how you are going to achieve that
========================================================================
5 principles of HYDRA's Protection Philosophy
	1. Information can be divided into distinct objects for the purpose of protection
	2. Objects are distinguished by type
		Built-in types: procedure, process, semaphore
		User-defined: file, directory
		Operations on objects: Type Specific: CALL, START, P; Type Independent: READ, WRITE
	3. Access to objects is controlled by capabilities
		Capability contains a large no. of access rights, can be transferred from one user to another, can be type specific/independent
		The more rights you have, the more control you have
			So object has no "owner" as such
	4. Each program should execute with the smallest set of access rights necessary
	5. Representation and implementation of operations for each type of object should be hidden in a subsystem
		Subsystem ~ type of object + associated procedures
		Procedures are used to manipulate objects using the mechanism of rights amplification
			Given a capability for an object of a particular type, the subsystem wishes to gain the rights necessary to manipulate that objects representation.
========================================================================
Objects, Capabilities
Object:
Unique-name, type, representation (Data-part, C-list —> Numbered list of capabilities —>

Name of particular object
Access rights — > Bit vector of size 24 —>
ex: read, write

16 generic rights
8 auxiliary rights (type specific)

	Cannot get access to an object w/o having capability to do so
	New objects can be created in terms of existing ones
	Operation on an object is a simple manipulation of Data-part or C-list
========================================================================
Manipulation of Objects

	HYDRA provides operations to manipulate objects: generic and non-generic
	Generic operations are:
		Type-independent and generic
		Implemented as calls to the kernel
		Used to manipulate the Data-part and the C-list
			getData, putData, addData (Data-part)
			Load, Store, Append, Delete, Copy (C-list part)
				C-list operations allow collections of objects to be passed around
	Non-generic operations are:
		Based on generic operations generic operations
		Implemented as procedures
========================================================================
How Objects share Data/Rights
	Object with capability structure allows sharing
	Sharing of information. Example:
		Three objects: Comm1, user U1 and U2
		U1 and U2 have capability for Comm1
		U1 stores info in the data-part of Comm1 and U2 retrieves it
	Sharing of rights. Example:
		U1 has read-right and write-right some file F1 and wants to grant U2 read access to F1
		U1 stores file capability of read-only in Comm1 allow
		U2 accesses the file to read using capability stored in Comm1
========================================================================
Procedures and Local Name Space
Procedure:
	Special object that serves as an abstraction of ordinary procedure
	Call to a procedure causes a change in the protection domain (recall that Protection domain: set of capabilities exercised by executing procedure)
	A c-list can be passed as an argument to a procedure
	A procedure may return a capability
Local Name space:
	Special type of object that represents executing programs
	Defines the instantaneous protection domain of an executing program
	Can be thought of as a graph of objects accessible to a program
========================================================================
Protection Problems (PP)
	HYDRA solves some well-known protection problems by extending the interpretation of rights
		Mutual Suspicion
		Modification
		Limitation of Propagation
		Conservation
		Confinement
========================================================================
PP1: Mutual Suspicion
Problem:
	Caller needs a guarantee that callee is not granted access to any of its objects except those for which it passes capabilities as parameters
	Callee needs a guarantee that the caller cannot gain access to its private data unless if it explicitly allows it
Solution:
	HYDRA's Protection Principle 4 states: each program should execute with the smallest set of access rights necessary. This guarantees solution to Mutual Suspicion
	Protection for Callee
		A caller can only operate on objects whose capabilities are present in the C-list, no access to callee's capabilities
		So, callee should be protected if it keeps sensitive data in its "own" (i.e. private) capabilities.
	Protection for Caller
		LNSes are stacked. A procedure can't access capabilities in LNSes deeper in the process stack.
========================================================================
PP2: Modification
	"User often wants to guarantee that an object passed as an argument to a procedure will not be modified as a result of the call."
Solution: MDFYRTS
		To store a capability in an object, one must have a capability for the object with both STORTS and MDFYRTS.
		User passes a capability to callee procedure restricting MDFYRTS
		HYDRA enforces that MDFYRTS can never be gained through amplification.
========================================================================
PP3: Limiting Propagation of Capabilities
	"A user wishes to allow another user to access an object but wants to guarantee that the other user can't share access with a third user."
Solution: ENVRTS
	A capability may only be stored in an object if the capability contains ENVRTS
	In this way a capability does not escape outside of the executing ENVironment (LNS)
========================================================================
PP4: Conservation
	"A user wishes to pass a capability for an object to a procedure. Though he expects the procedure to modify the object, he wants to guarantee that on one will continue to modify 	the object after the procedure returns."
Solution: ENVRTS
	If the capability for an object is passed to a procedure with ENVRTS restricted, the LNS of the procedure cannot store this capability in any object that another user can access
========================================================================
PP5: Confinement – Limiting propagation of information
WHAT IF???
		A procedure when called, creates a new object, gives it the capability allowing ENVRTS and MDFYRTS, copies data from old object to new object and shares 			the capability for the newly created object with other objects.
	"A user needs a guarantee that no information may escape from the called procedure except to objects specified by caller."
Solution: MDFYRTS
	Restrict MDFYRTS to guarantee against leakage of information
========================================================================
Conclusions

	Separation of Policy and Mechanism
		Protection mechanism is minimal yet efficient.
		Using this mechanism, user can develop a complex policy to guarantee certain kinds of behaviour
	Very flexible, fine-grained protection
	Has solved protection problems like Mutual Suspicion, Modification, Limitation of Propagation
	Looks performance-intensive though…
	A bit complicated to create objects and define operations on them, don't you think?